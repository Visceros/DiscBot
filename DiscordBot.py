# coding: utf8

import discord
import asyncio   # check if installed
import random
import psycopg2  # check if installed
import os
from time import sleep
from discord.utils import get   # just unused statement, cause I use discord.utils.get everywhere (for explicity)
from discord.ext import commands

token = 'NTAzNTQ5MDA1ODMwMDI5MzEy.Du8B4w.jXHBly_o8-E1EJDYsgYMOmxVAhs'
prefix = '>'
des = 'A discord bot for doing some automatic things that I am to lazy to do myself.'
rgb_colors = ['ff0000', 'ff4800', 'ffaa00', 'ffe200', 'a5ff00', '51ff00', '00ff55', '00ffb6', '00fffc', '00bdff', '0055ff', '0600ff', '6700ff', '9f00ff', 'f200ff', 'ff0088', 'ff003b']
Client = discord.Client()
bot = commands.Bot(description=des, command_prefix=prefix)

db_user = 'postgres'
db_pwd = '32167'
# db = psycopg2.connect(
#     dbname='DiscBot_db',
#     user=db_user,
#     password=db_pwd,
#     host='',
#     port='5432'
# )
# cursor = db.cursor()
# cursor.execute('SELECT EXISTS(SELECT * FROM DiscBot+db.tables WHERE table_name=discord_users)')
# if cursor.fetchone()[0] is True:
#     pass
# else:
#     try:
#         cursor.execute('''CREATE TABLE discord_users
#             ID INT PRIMARY KEY NOT NULL,
#             NAME TEXT NOT NULL,
#             ACTIVITY INT,
#             GOLD INT);''')
#     except Exception as e:
#         print(e)
#         print(e.__traceback__)

class User:
    def __init__(self, user_id, user_name, activity=0, gold=0):
        """We use separate class "User" for discord users to simplify the data handling
        at least 2 *args should be given: 1)user id 2) user name (nick)"""
        self.id = user_id
        self.username = user_name
        self.join_date = join_date
        self.activity = activity
        self.gold = gold

    def db_add(self):  #–¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ –ë–î
        pass

    def db_update(self):  #–æ–±–Ω–æ–≤–ª—è–µ–º —é–∑–≤–µ—Ä—è - –Ω–∏–∫, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
        pass

    def db_del(self):  #–µ—Å–ª–∏ —é–∑–µ—Ä–∞ –∑–∞–±–∞–Ω–∏–ª–∏ –∏–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞, —É–¥–∞–ª—è–µ–º –∏–∑ –î–ë (–ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º)
        pass


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ
def get_userlist(ctx):
    online_users = []
    for usr in ctx.guild.members:
        if str(usr.status) not in(['offline', 'invisible', 'dnd']):
            if usr.voice is not None and str(usr.channel.name) is not 'AFK':
                online_users.append(usr.id)
#    ctx.send(online_users)
    return online_users

# @bot.command()  # –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ç–µ—Ö –∫—Ç–æ –æ—Ñ—Ñ–ª–∞–π–Ω)
# async def who_online(ctx):


@bot.command(pass_context=True)
async def echo(ctx, *args):  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ = –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –±—É–¥–µ—Ç ">echo"
    """ prints your message like a bot said it """
    # —Ç—É—Ç –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ —Å–ª–æ–≤ –≤ "args" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    out = ''
    for word in ctx.message.split():
        out += word
        out += ' '
    await ctx.send(out)


@bot.command(pass_context=True)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –¥–µ–Ω–µ–≥
async def money_start(ctx):
    global db
    db['user_names'] = {}
    db['user_currency'] = {}
    await ctx.send('Okay I will give em money')
    while not Client.is_closed():
        onvoice_list = get_userlist(ctx)
        for usr in ctx.guild.members:
            if usr.id in onvoice_list:
                if usr.id not in db['user_names'].keys():
                    await ctx.send('adding to base: {}'.format(usr.id))
                    db['user_names'][usr.id] = str(usr.display_name)
                    db['user_currency'][usr.id] = 1
                    print('–∞–π–¥–∏—à–Ω–∏–∫–∏:', list(db['user_names'].keys()), '\n', '–∑–Ω–∞—á–µ–Ω–∏—è:', list(db['user_names'].values()))
                elif usr.id in db['user_names'].keys():
                    db['user_currency'][usr.id] = db['user_currency'][usr.id] + 1
        print('users data:')
        print(db['user_names'])
        print('currency data:')
        print(db['user_currency'])
        sleep(60) # 1 minute
        if ctx.message.content.startswith('_money_stop'):
            await ctx.send('Okay I will stop giving money')
            break
        else:
            pass
    return db['user_names'], db['user_currency']


@bot.command(pass_context=True)
async def checkme(ctx):
    me = ctx.message.author
    if me.id in list(db['user_currency'].keys()):
        await ctx.send('your money amount now is: ',db['user_currency'][me.id])
    else:
        await ctx.send('sorry you have no money')


@bot.command(pass_context=True)
async def showall(ctx):
    await ctx.send(list(db['user_currency'].keys()))


@bot.event
async def on_ready():
    print('I\'m ready to do your biddings, Master')


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–ª–∞–Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
# @bot.command()
# async def daily(ctx):
#     me = ctx.message.author
#     bonus_money = random.randint(50,150)
#     if me.id in list(db['user_currency'].keys()):


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–¥—É–∂–Ω–æ–≥–æ –Ω–∏–∫–∞
@bot.command(pass_context=True)
async def rainbowise(ctx):
    rainbowrolename = 'V.I.P. —Ä–∞–¥—É–∂–Ω—ã–π –Ω–∏–∫'
    role = discord.utils.get(ctx.guild.roles, name=rainbowrolename)
    while not Client.is_closed():
        for clr in rgb_colors:
            clr = random.choice(rgb_colors)
            try:
                await role.edit(color=discord.Colour(int(clr, 16)))
                sleep(600)
            except Exception as e:
                await ctx.send(f'Sorry. Could not rainbowise the role. Check my permissions please, or that my role is higher than "{rainbowrolename}" role')
                print(e.args, e.__cause__)
                pass


# ------------- –ò–ì–†–ê –°–£–ù–î–£–ß–ö–ò -----------
@bot.command(pass_context=True)
async def chest(ctx):
    usual_rewards = []
    with open(os.path.join(os.getcwd(), 'usual-rewards.txt'), mode='r', encoding='utf-8') as file:
        for line in file:
            usual_rewards.append(str(line))
    golden_rewards = []
    reactions_silverchests = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£']
    reactions_goldchests = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£']
    author = ctx.message.author
    channel = ctx.message.channel
    check_role = discord.utils.get(ctx.message.author.roles, name='–°–æ–∫–ª–∞–Ω—ã')
    # Check if it's the right channel to write to and if user have relevant role
    # if '—Å—É–Ω–¥—É—á–∫–∏' in channel.name.lower():
    #     pass
    # else:
    #      await ctx.send('```Error! –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ.```')
    isClanMate = False
    if check_role in author.roles:
        isClanMate = True
    if not isClanMate:
        await ctx.send(f'```Error! –ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ —á–ª–µ–Ω—ã –∫–ª–∞–Ω–∞ —Å —Ä–æ–ª—å—é "{check_role}"```')
    else:
        # IF all correct we head further
        start_message = await ctx.send('```yaml\n–†–µ—à–∏–ª–∏ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑? –û—Ç–ª–∏—á–Ω–æ! \n' +
                                       '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –∏–∑ —à–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—ã—Ö —Å—É–Ω–¥—É–∫–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞–µ–º? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 6```')
        # showBasicChests = await ctx.send()  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å—É–Ω–¥—É–∫–∞–º–∏
        for react in reactions_silverchests:
            await start_message.add_reaction(react)

        def check(reaction, user):
            return user == author and str(reaction.emoji) in reactions_silverchests

        try:
            reaction, user = await bot.wait_for('reaction_add', timeout=120, check=check)
        except asyncio.TimeoutError:
            await ctx.send('```yaml\n–£–¥–∞—á–∞ –Ω–µ —Ç–µ—Ä–ø–∏—Ç –º–µ–¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö. –í—Ä–µ–º—è –≤—ã—à–ª–æ! üëé```')
        else:
            # await reaction.remove(author)
            random.shuffle(usual_rewards)
            usual_reward = random.choice(usual_rewards)
            await channel.send(f'```yaml\n–°—É–Ω–¥—É–∫ —Å–æ —Å–∫—Ä–∏–ø–æ–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏... {usual_reward}```')
            if '–∑–æ–ª–æ—Ç–æ–π –∫–ª—é—á' in usual_reward.lower():
                #–í—ã –ø—Ä–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ –ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á –≤ –∑–∞–º–æ—á–Ω–æ–π —Å–∫–≤–∞–∂–∏–Ω–µ –∏ –∫—Ä—ã—à–∫–∞ —Ç–∏—Ö–æ–Ω—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
                pass

bot.run(token)
